// SPDX-FileCopyrightText: 2023 Friedrich-Alexander-Universitat Erlangen-Nurnberg
//
// SPDX-License-Identifier: AGPL-3.0-only

// Example 1: Train Stops Data
// Learning goals:
// - Understand the core concepts pipeline, block, and pipe
// - Understand the general structure of a pipeline

// 1. This Jayvee model describes a pipeline 
// from a CSV file on the web 
// to a SQLite file sink for train stops data.

pipeline TrainStopsPipeline {

    // 2. We describe the structure of the pipeline,
    // usually at the top of the pipeline.
    // by connecting blocks via pipes. 

    // 3. Verbose syntax of a pipe
    // connecting the block TrainStopsExtractor
    // with the block TrainStopsTextFileInterpreter.
    pipe {
        from: TrainStopsExtractor;
        to: TrainStopsTextFileInterpreter;
    }

    // 4. The output of the "from" block is hereby used 
    // as input for the "to" block.

    // 5. More convenient syntax of a pipe
    TrainStopsTextFileInterpreter -> TrainStopsCSVInterpreter;

    // 6. Pipes can be further chained, 
    // leading to an overview of the pipeline.
    TrainStopsCSVInterpreter 
        -> TrainStopsTableInterpreter
        -> TrainStopsLoader;


    // 7. Below the pipes, we usually define the blocks 
    // that are connected by the pipes.

    // 8. Blocks instantiate a blocktype by using the oftype keyword.
    // The blocktype defines the available properties that the block
    // can use to specify the intended behavior of the block 
    block TrainStopsExtractor oftype HttpExtractor {

        // 9. Properties are assigned to concrete values.
        // Here, we specify the URL where the file shall be downloaded from.
        url: "https://download-data.deutschebahn.com/static/datasets/haltestellen/D_Bahnhof_2020_alle.CSV";
    }

    // 10. The HttpExtractor requires no input and produces a binary file as output.
    // This file has to be interpreted, e.g., as a text file.
    block TrainStopsTextFileInterpreter oftype TextFileInterpreter { }

    // 11. Next, we interpret the text file as a sheet.
    // A sheet only contains text cells and is useful for manipulating the shape of data before assigning more strict value types to cells.
    block TrainStopsCSVInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }

    // 12. We can write into cells of a sheet using the CellWriter blocktype.
    // block NameHeaderWriter oftype CellWriter {
    //     // 13. We utilize a syntax similar to spreadsheet programs.
    //     // Cell ranges can be described using the keywords "cell", "row", "column", or "range" that indicate which 
    //     // cells are selected for the write action.
    //     // at: cell A1;

    //     // 14. For each cell we selected with the "at" property above,
    //     // we can specify what value shall be written into the cell.
    //     // write: ["name"];
    // }

    // 15. As a next step, we interpret the sheet as a table by adding structure.
    // We define a valuetype per column that specifies the data type of the column.
    // Rows that include values that are not valid according to their valuetypes are dropped automatically. 
    block TrainStopsTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "EVA_NR" oftype text,
            "DS100" oftype text,
            "IFOPT" oftype IfoptFormat,
            "NAME" oftype text,
            "Verkehr" oftype VerkehrValues,
            "Laenge" oftype GeoCoordinateValue,
            "Breite" oftype GeoCoordinateValue,
            "Betreiber_Name" oftype text,
            "Betreiber_Nr" oftype integer // to fix 
        ];
    }

    // 16. As a last step, we load the table into a sink,
    // here into a SQLite file.
    // The structural information of the table is used
    // to generate the correct table.
    block TrainStopsLoader oftype SQLiteLoader {
        table: "trainstops";
        file: "./trainstops.sqlite";
    }

    // 17. Congratulations!
    // You can now use the sink for your data analysis, app, 
    // or whatever you want to do with the cleaned data.  
}

valuetype VerkehrValues oftype text {
    constraints: [
        UseVerkehrAllowlist,
    ];
}

constraint UseVerkehrAllowlist on text:
    value in [
        "FV", "RV", "nur DPN",
    ];

valuetype GeoCoordinateValue oftype decimal {
    constraints: [
        UseRangeGeoCoordinate,
    ];
}

constraint UseRangeGeoCoordinate on decimal:
    value >= -90 and value <= 90;

valuetype IfoptFormat oftype text {
    // 10. Valuetypes can be further refined by providing constraints.
    constraints: [
        DescripedIfoprtFormat,
    ];
}

// <exactly two characters>:<any amount of numbers>:<any amount of numbers><optionally another colon followed by any amount of numbers>
constraint DescripedIfoprtFormat on text:
    value matches /^[A-Za-z]{2}:\d*:\d*(?::\d*)?$/;
